{"ast":null,"code":"var _jsxFileName = \"/home/liege/dev/brainstation/training/react/pondit/assignment/imdb_funtional_component/IMDb-Movie-List/src/components/movies.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport Table from \"./common/table.component\";\nimport Rating from \"./rating.component\";\nimport getMovies from \"../service/get-movies.service\";\nimport getGenres from \"../service/get-genres.service\";\nimport Pagination from \"./common/pagination.component\";\nimport Filter from \"./common/filtering.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movies = () => {\n  _s();\n\n  const initialState = {\n    movies: [],\n    sortColumn: {\n      path: \"id\",\n      order: \"asc\"\n    },\n    activePage: 1,\n    pageCount: 5,\n    genres: [],\n    selectedGenre: \"All Genres\"\n  };\n  const [state, setState] = useState(initialState);\n  useEffect(() => {\n    const movies = getMovies();\n    const genres = [\"All Genres\", ...getGenres()];\n    setState(prev => ({ ...prev,\n      movies,\n      genres\n    }));\n  }, []);\n\n  function changeState(fieldName, updatedState) {\n    setState(prev => ({ ...prev,\n      [fieldName]: updatedState\n    }));\n  }\n\n  function handleToggleRating(movieRank) {\n    const movies = [...state.movies];\n    const movie = movies.find(movie => movie.id === movieRank);\n    movie.your_rating = !movie.your_rating;\n    changeState(\"movies\", movies);\n  }\n\n  function handleSort(sortColumn) {\n    changeState(\"sortColumn\", sortColumn);\n  }\n\n  function handleClickPage(activePage) {\n    changeState(\"activePage\", activePage);\n  }\n\n  function handleClickFilter(selectedGenre) {\n    changeState(\"selectedGenre\", selectedGenre);\n  }\n\n  function paginateMovies(movies) {\n    const {\n      activePage,\n      pageCount\n    } = state;\n    const start = (activePage - 1) * pageCount;\n    const paginatedMovies = movies.slice(start, start + pageCount);\n    return paginatedMovies;\n  }\n\n  function filterMovies() {\n    const {\n      movies,\n      selectedGenre\n    } = state;\n    const filteredMovies = movies.filter(movie => {\n      if (selectedGenre === \"All Genres\") return true;\n      if (movie.genres.includes(selectedGenre)) return true;\n      return false;\n    });\n    return filteredMovies;\n  }\n\n  function sortMovies(movies) {\n    const {\n      sortColumn\n    } = state;\n\n    const sortedMovies = _.orderBy(movies, [sortColumn.path], [sortColumn.order]);\n\n    return sortedMovies;\n  }\n\n  const filteredMovies = filterMovies();\n  const paginatedMovies = paginateMovies(filteredMovies);\n  const movies = sortMovies(paginatedMovies);\n  const columns = [{\n    label: \"Rank\",\n    path: \"id\",\n    sorting: true,\n    content: (movie, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: movie[key]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 38\n    }, this)\n  }, {\n    label: \"Title\",\n    path: \"title\",\n    sorting: true,\n    content: (movie, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: movie[key]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 38\n    }, this)\n  }, {\n    label: \"Poster\",\n    path: \"posterUrl\",\n    content: (movie, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie[key],\n        style: {\n          height: \"100px\",\n          width: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)\n  }, {\n    label: \"Your Rating\",\n    path: \"your_rating\",\n    content: (movie, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(Rating, {\n        isRated: movie[key],\n        rank: movie.id,\n        handleToggleRating: handleToggleRating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this)\n  }, {\n    label: \"Action\",\n    path: \"action\",\n    content: (movie, key) => /*#__PURE__*/_jsxDEV(\"td\", {\n      children: movie[key]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 38\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Filter, {\n          items: state.genres,\n          selectedGenre: state.selectedGenre,\n          onClickFilter: handleClickFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-8\",\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            items: movies,\n            columns: columns,\n            onSort: handleSort,\n            sortColumn: state.sortColumn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n            totalItems: filteredMovies.length,\n            pageCount: state.pageCount,\n            activePage: state.activePage,\n            onClickPage: handleClickPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Movies, \"g9yWDQF6ixWa1r5sfsm7YAeGJG4=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/liege/dev/brainstation/training/react/pondit/assignment/imdb_funtional_component/IMDb-Movie-List/src/components/movies.component.js"],"names":["React","useEffect","useState","_","Table","Rating","getMovies","getGenres","Pagination","Filter","Movies","initialState","movies","sortColumn","path","order","activePage","pageCount","genres","selectedGenre","state","setState","prev","changeState","fieldName","updatedState","handleToggleRating","movieRank","movie","find","id","your_rating","handleSort","handleClickPage","handleClickFilter","paginateMovies","start","paginatedMovies","slice","filterMovies","filteredMovies","filter","includes","sortMovies","sortedMovies","orderBy","columns","label","sorting","content","key","height","width","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\n\nimport Table from \"./common/table.component\";\nimport Rating from \"./rating.component\";\nimport getMovies from \"../service/get-movies.service\";\nimport getGenres from \"../service/get-genres.service\";\nimport Pagination from \"./common/pagination.component\";\nimport Filter from \"./common/filtering.component\";\n\nconst Movies = () => {\n    const initialState = {\n        movies: [],\n        sortColumn: { path: \"id\", order: \"asc\" },\n        activePage: 1,\n        pageCount: 5,\n        genres: [],\n        selectedGenre: \"All Genres\",\n    };\n\n    const [state, setState] = useState(initialState);\n\n    useEffect(() => {\n        const movies = getMovies();\n        const genres = [\"All Genres\", ...getGenres()];\n        setState((prev) => ({ ...prev, movies, genres }));\n    }, []);\n\n    function changeState(fieldName, updatedState) {\n        setState((prev) => ({ ...prev, [fieldName]: updatedState }));\n    }\n\n    function handleToggleRating(movieRank) {\n        const movies = [...state.movies];\n        const movie = movies.find((movie) => movie.id === movieRank);\n        movie.your_rating = !movie.your_rating;\n        changeState(\"movies\", movies);\n    }\n\n    function handleSort(sortColumn) {\n        changeState(\"sortColumn\", sortColumn);\n    }\n\n    function handleClickPage(activePage) {\n        changeState(\"activePage\", activePage);\n    }\n\n    function handleClickFilter(selectedGenre) {\n        changeState(\"selectedGenre\", selectedGenre);\n    }\n\n    function paginateMovies(movies) {\n        const { activePage, pageCount } = state;\n        const start = (activePage - 1) * pageCount;\n        const paginatedMovies = movies.slice(start, start + pageCount);\n        return paginatedMovies;\n    }\n\n    function filterMovies() {\n        const { movies, selectedGenre } = state;\n        const filteredMovies = movies.filter((movie) => {\n            if (selectedGenre === \"All Genres\") return true;\n\n            if (movie.genres.includes(selectedGenre)) return true;\n            return false;\n        });\n        return filteredMovies;\n    }\n\n    function sortMovies(movies) {\n        const { sortColumn } = state;\n        const sortedMovies = _.orderBy(\n            movies,\n            [sortColumn.path],\n            [sortColumn.order]\n        );\n        return sortedMovies;\n    }\n\n    const filteredMovies = filterMovies();\n    const paginatedMovies = paginateMovies(filteredMovies);\n    const movies = sortMovies(paginatedMovies);\n\n    const columns = [\n        {\n            label: \"Rank\",\n            path: \"id\",\n            sorting: true,\n            content: (movie, key) => <td>{movie[key]}</td>,\n        },\n        {\n            label: \"Title\",\n            path: \"title\",\n            sorting: true,\n            content: (movie, key) => <td>{movie[key]}</td>,\n        },\n        {\n            label: \"Poster\",\n            path: \"posterUrl\",\n            content: (movie, key) => (\n                <td>\n                    <img\n                        src={movie[key]}\n                        style={{ height: \"100px\", width: \"auto\" }}\n                    />\n                </td>\n            ),\n        },\n        {\n            label: \"Your Rating\",\n            path: \"your_rating\",\n            content: (movie, key) => (\n                <td>\n                    <Rating\n                        isRated={movie[key]}\n                        rank={movie.id}\n                        handleToggleRating={handleToggleRating}\n                    />\n                </td>\n            ),\n        },\n        {\n            label: \"Action\",\n            path: \"action\",\n            content: (movie, key) => <td>{movie[key]}</td>,\n        },\n    ];\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Filter\n                        items={state.genres}\n                        selectedGenre={state.selectedGenre}\n                        onClickFilter={handleClickFilter}\n                    />\n                    <div className=\"col-lg-8\">\n                        <Table\n                            items={movies}\n                            columns={columns}\n                            onSort={handleSort}\n                            sortColumn={state.sortColumn}\n                        />\n                        <Pagination\n                            totalItems={filteredMovies.length}\n                            pageCount={state.pageCount}\n                            activePage={state.activePage}\n                            onClickPage={handleClickPage}\n                        />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}